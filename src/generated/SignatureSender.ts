/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace TypesLib {
  export type SignatureRequestStruct = {
    message: BytesLike;
    messageHash: BytesLike;
    condition: BytesLike;
    schemeID: string;
    callback: AddressLike;
    signature: BytesLike;
    isFulfilled: boolean;
  };

  export type SignatureRequestStructOutput = [
    message: string,
    messageHash: string,
    condition: string,
    schemeID: string,
    callback: string,
    signature: string,
    isFulfilled: boolean
  ] & {
    message: string;
    messageHash: string;
    condition: string;
    schemeID: string;
    callback: string;
    signature: string;
    isFulfilled: boolean;
  };
}

export interface SignatureSenderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "fulfilSignatureRequest"
      | "getAllErroredRequestIds"
      | "getAllFulfilledRequestIds"
      | "getAllUnfulfilledRequestIds"
      | "getCountOfUnfulfilledRequestIds"
      | "getPublicKey"
      | "getPublicKeyBytes"
      | "getRequest"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getRoleMembers"
      | "grantRole"
      | "hasErrored"
      | "hasRole"
      | "initialize"
      | "isInFlight"
      | "lastRequestID"
      | "multicall"
      | "proxiableUUID"
      | "renounceRole"
      | "requestSignature"
      | "requests"
      | "retryCallback"
      | "revokeRole"
      | "setSignatureSchemeAddressProvider"
      | "signatureSchemeAddressProvider"
      | "supportsInterface"
      | "upgradeToAndCall"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SignatureCallbackFailed"
      | "SignatureRequestFulfilled"
      | "SignatureRequested"
      | "SignatureSchemeAddressProviderUpdated"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfilSignatureRequest",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllErroredRequestIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFulfilledRequestIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUnfulfilledRequestIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCountOfUnfulfilledRequestIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicKeyBytes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMembers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasErrored",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish],
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInFlight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRequestID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSignature",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retryCallback",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSignatureSchemeAddressProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signatureSchemeAddressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfilSignatureRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllErroredRequestIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllFulfilledRequestIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUnfulfilledRequestIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCountOfUnfulfilledRequestIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicKeyBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRequest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasErrored", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isInFlight", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRequestID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retryCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSignatureSchemeAddressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signatureSchemeAddressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignatureCallbackFailedEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignatureRequestFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish, signature: BytesLike];
  export type OutputTuple = [requestID: bigint, signature: string];
  export interface OutputObject {
    requestID: bigint;
    signature: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignatureRequestedEvent {
  export type InputTuple = [
    requestID: BigNumberish,
    callback: AddressLike,
    schemeID: string,
    message: BytesLike,
    messageHashToSign: BytesLike,
    condition: BytesLike,
    requestedAt: BigNumberish
  ];
  export type OutputTuple = [
    requestID: bigint,
    callback: string,
    schemeID: string,
    message: string,
    messageHashToSign: string,
    condition: string,
    requestedAt: bigint
  ];
  export interface OutputObject {
    requestID: bigint;
    callback: string;
    schemeID: string;
    message: string;
    messageHashToSign: string;
    condition: string;
    requestedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignatureSchemeAddressProviderUpdatedEvent {
  export type InputTuple = [newSignatureSchemeAddressProvider: AddressLike];
  export type OutputTuple = [newSignatureSchemeAddressProvider: string];
  export interface OutputObject {
    newSignatureSchemeAddressProvider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SignatureSender extends BaseContract {
  connect(runner?: ContractRunner | null): SignatureSender;
  waitForDeployment(): Promise<this>;

  interface: SignatureSenderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  fulfilSignatureRequest: TypedContractMethod<
    [requestID: BigNumberish, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  getAllErroredRequestIds: TypedContractMethod<[], [bigint[]], "view">;

  getAllFulfilledRequestIds: TypedContractMethod<[], [bigint[]], "view">;

  getAllUnfulfilledRequestIds: TypedContractMethod<[], [bigint[]], "view">;

  getCountOfUnfulfilledRequestIds: TypedContractMethod<[], [bigint], "view">;

  getPublicKey: TypedContractMethod<
    [],
    [[[bigint, bigint], [bigint, bigint]]],
    "view"
  >;

  getPublicKeyBytes: TypedContractMethod<[], [string], "view">;

  getRequest: TypedContractMethod<
    [requestID: BigNumberish],
    [TypesLib.SignatureRequestStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleMember: TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;

  getRoleMembers: TypedContractMethod<[role: BytesLike], [string[]], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasErrored: TypedContractMethod<[requestID: BigNumberish], [boolean], "view">;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      x: [BigNumberish, BigNumberish],
      y: [BigNumberish, BigNumberish],
      owner: AddressLike,
      _signatureSchemeAddressProvider: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isInFlight: TypedContractMethod<[requestID: BigNumberish], [boolean], "view">;

  lastRequestID: TypedContractMethod<[], [bigint], "view">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  requestSignature: TypedContractMethod<
    [schemeID: string, message: BytesLike, condition: BytesLike],
    [bigint],
    "nonpayable"
  >;

  requests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, string, boolean] & {
        message: string;
        messageHash: string;
        condition: string;
        schemeID: string;
        callback: string;
        signature: string;
        isFulfilled: boolean;
      }
    ],
    "view"
  >;

  retryCallback: TypedContractMethod<
    [requestID: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setSignatureSchemeAddressProvider: TypedContractMethod<
    [newSignatureSchemeAddressProvider: AddressLike],
    [void],
    "nonpayable"
  >;

  signatureSchemeAddressProvider: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fulfilSignatureRequest"
  ): TypedContractMethod<
    [requestID: BigNumberish, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllErroredRequestIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAllFulfilledRequestIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAllUnfulfilledRequestIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getCountOfUnfulfilledRequestIds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPublicKey"
  ): TypedContractMethod<[], [[[bigint, bigint], [bigint, bigint]]], "view">;
  getFunction(
    nameOrSignature: "getPublicKeyBytes"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRequest"
  ): TypedContractMethod<
    [requestID: BigNumberish],
    [TypesLib.SignatureRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleMember"
  ): TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleMemberCount"
  ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleMembers"
  ): TypedContractMethod<[role: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasErrored"
  ): TypedContractMethod<[requestID: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      x: [BigNumberish, BigNumberish],
      y: [BigNumberish, BigNumberish],
      owner: AddressLike,
      _signatureSchemeAddressProvider: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isInFlight"
  ): TypedContractMethod<[requestID: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastRequestID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestSignature"
  ): TypedContractMethod<
    [schemeID: string, message: BytesLike, condition: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, string, boolean] & {
        message: string;
        messageHash: string;
        condition: string;
        schemeID: string;
        callback: string;
        signature: string;
        isFulfilled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "retryCallback"
  ): TypedContractMethod<[requestID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSignatureSchemeAddressProvider"
  ): TypedContractMethod<
    [newSignatureSchemeAddressProvider: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signatureSchemeAddressProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SignatureCallbackFailed"
  ): TypedContractEvent<
    SignatureCallbackFailedEvent.InputTuple,
    SignatureCallbackFailedEvent.OutputTuple,
    SignatureCallbackFailedEvent.OutputObject
  >;
  getEvent(
    key: "SignatureRequestFulfilled"
  ): TypedContractEvent<
    SignatureRequestFulfilledEvent.InputTuple,
    SignatureRequestFulfilledEvent.OutputTuple,
    SignatureRequestFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "SignatureRequested"
  ): TypedContractEvent<
    SignatureRequestedEvent.InputTuple,
    SignatureRequestedEvent.OutputTuple,
    SignatureRequestedEvent.OutputObject
  >;
  getEvent(
    key: "SignatureSchemeAddressProviderUpdated"
  ): TypedContractEvent<
    SignatureSchemeAddressProviderUpdatedEvent.InputTuple,
    SignatureSchemeAddressProviderUpdatedEvent.OutputTuple,
    SignatureSchemeAddressProviderUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SignatureCallbackFailed(uint256)": TypedContractEvent<
      SignatureCallbackFailedEvent.InputTuple,
      SignatureCallbackFailedEvent.OutputTuple,
      SignatureCallbackFailedEvent.OutputObject
    >;
    SignatureCallbackFailed: TypedContractEvent<
      SignatureCallbackFailedEvent.InputTuple,
      SignatureCallbackFailedEvent.OutputTuple,
      SignatureCallbackFailedEvent.OutputObject
    >;

    "SignatureRequestFulfilled(uint256,bytes)": TypedContractEvent<
      SignatureRequestFulfilledEvent.InputTuple,
      SignatureRequestFulfilledEvent.OutputTuple,
      SignatureRequestFulfilledEvent.OutputObject
    >;
    SignatureRequestFulfilled: TypedContractEvent<
      SignatureRequestFulfilledEvent.InputTuple,
      SignatureRequestFulfilledEvent.OutputTuple,
      SignatureRequestFulfilledEvent.OutputObject
    >;

    "SignatureRequested(uint256,address,string,bytes,bytes,bytes,uint256)": TypedContractEvent<
      SignatureRequestedEvent.InputTuple,
      SignatureRequestedEvent.OutputTuple,
      SignatureRequestedEvent.OutputObject
    >;
    SignatureRequested: TypedContractEvent<
      SignatureRequestedEvent.InputTuple,
      SignatureRequestedEvent.OutputTuple,
      SignatureRequestedEvent.OutputObject
    >;

    "SignatureSchemeAddressProviderUpdated(address)": TypedContractEvent<
      SignatureSchemeAddressProviderUpdatedEvent.InputTuple,
      SignatureSchemeAddressProviderUpdatedEvent.OutputTuple,
      SignatureSchemeAddressProviderUpdatedEvent.OutputObject
    >;
    SignatureSchemeAddressProviderUpdated: TypedContractEvent<
      SignatureSchemeAddressProviderUpdatedEvent.InputTuple,
      SignatureSchemeAddressProviderUpdatedEvent.OutputTuple,
      SignatureSchemeAddressProviderUpdatedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
