/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  FeistelShuffleOptimised,
  FeistelShuffleOptimisedInterface,
} from "../FeistelShuffleOptimised";

const _abi = [
  {
    type: "error",
    name: "InvalidInputs",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122011a261f4ecf9db22eaeff90a1de19dcc3fb691fc225d0b0cb96278142d8feabf64736f6c63430008180033";

type FeistelShuffleOptimisedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FeistelShuffleOptimisedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FeistelShuffleOptimised__factory extends ContractFactory {
  constructor(...args: FeistelShuffleOptimisedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      FeistelShuffleOptimised & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): FeistelShuffleOptimised__factory {
    return super.connect(runner) as FeistelShuffleOptimised__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeistelShuffleOptimisedInterface {
    return new Interface(_abi) as FeistelShuffleOptimisedInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): FeistelShuffleOptimised {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as FeistelShuffleOptimised;
  }
}
